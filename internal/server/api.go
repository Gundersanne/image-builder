// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	Ec2    AWSUploadRequestOptionsEc2 `json:"ec2"`
	Region string                     `json:"region"`
	S3     AWSUploadRequestOptionsS3  `json:"s3"`
}

// AWSUploadRequestOptionsEc2 defines model for AWSUploadRequestOptionsEc2.
type AWSUploadRequestOptionsEc2 struct {
	AccessKeyId     string `json:"access_key_id"`
	SecretAccessKey string `json:"secret_access_key"`
}

// AWSUploadRequestOptionsS3 defines model for AWSUploadRequestOptionsS3.
type AWSUploadRequestOptionsS3 struct {
	AccessKeyId     string `json:"access_key_id"`
	Bucket          string `json:"bucket"`
	SecretAccessKey string `json:"secret_access_key"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	Status string `json:"status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture   string           `json:"architecture"`
	ImageType      string           `json:"image_type"`
	UploadRequests *[]UploadRequest `json:"upload_requests,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options AWSUploadRequestOptions `json:"options"`
	Type    string                  `json:"type"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

type ServerInterface interface {
	// get the architectures and their image types available for a given distribution (GET /architectures/{distribution})
	GetArchitectures(w http.ResponseWriter, r *http.Request)
	// compose image (POST /compose)
	ComposeImage(w http.ResponseWriter, r *http.Request)
	// get status of an image compose (GET /compose/{composeId})
	GetComposeStatus(w http.ResponseWriter, r *http.Request)
	// get the available distributions (GET /distributions)
	GetDistributions(w http.ResponseWriter, r *http.Request)
	// get the openapi json specification (GET /openapi.json)
	GetOpenapiJson(w http.ResponseWriter, r *http.Request)
	// get the service version (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// GetArchitectures operation middleware
func GetArchitecturesCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "distribution" -------------
		var distribution string

		err = runtime.BindStyledParameter("simple", false, "distribution", chi.URLParam(r, "distribution"), &distribution)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter distribution: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "distribution", distribution)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ComposeImage operation middleware
func ComposeImageCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetComposeStatus operation middleware
func GetComposeStatusCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "composeId" -------------
		var composeId string

		err = runtime.BindStyledParameter("simple", false, "composeId", chi.URLParam(r, "composeId"), &composeId)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter composeId: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "composeId", composeId)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetDistributions operation middleware
func GetDistributionsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetOpenapiJson operation middleware
func GetOpenapiJsonCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetVersion operation middleware
func GetVersionCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetArchitecturesCtx)
		r.Get("/architectures/{distribution}", si.GetArchitectures)
	})
	r.Group(func(r chi.Router) {
		r.Use(ComposeImageCtx)
		r.Post("/compose", si.ComposeImage)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetComposeStatusCtx)
		r.Get("/compose/{composeId}", si.GetComposeStatus)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetDistributionsCtx)
		r.Get("/distributions", si.GetDistributions)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetOpenapiJsonCtx)
		r.Get("/openapi.json", si.GetOpenapiJson)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetVersionCtx)
		r.Get("/version", si.GetVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX3W7bNhR+FYLbxQbIlusUbeG7LHVXt2lTxFjXoggCmjy22EiiQlJxvMDvPpCiZFGi",
	"HXdYgO2qqXh+v/OdHz9gKrJC5JBrhScPWNEEMmL/PP1z/keRCsIu4bYEpS8KzUVunwopCpCag/0f0LH5",
	"52cJSzzBP8U7i7EzF++xNaVjvI2whBUXuTV1T7IiBTzBUA7WoPTgGY6w3hTmk9KS5yujoE7+ocP5Cd5a",
	"h7cll8Dw5Fvt3BqNbC5XjUex+A5UG48HEujhQSgFpa5vYHPNmZ/V6fvZ6exi/ubi9cePL6dfTj98Op8G",
	"EwQqQV/vLPlm1u9IKr/crhm/XbM30w+z+P3LW75m8eLT/eWSn311pt9Pv+IIL4XMiMYTXBCl1kKyvscO",
	"Jn4GoXB+AKP5yZNAtCjpDWhfN9sM3Of/I6ZNTkFwJU24BqpLCTMNWQBTSRM/pftXL65fPA9hwTOygmvz",
	"2apyDZnydW+pWI9Dqu4DkZJs+kmaGHzzjyXjB3Cwp7sQ9KKJ8JlRU+AY2AeJlkqLjP9Fmll2yOOZL72N",
	"MOMGiUWpewNLJpAOXu0HW1YhHZ/uzKjViTwGvBdXz2WoBg1SqhC5gj5UVWMeJjVn+Gpna66JLgMLQjXf",
	"D1tzctZir04dk+VCUcmLug6HgJy3ZbfbABavW+iFm4uB525X9ktg6C3RaJprkIXkCtA5z8t79Mvl2+n5",
	"r+jVMNhFOcngOP50MLKKkRfP1SMZHU+5Hg6BDvNoGRxCdY8GCt4eDcHn0i6QH28Wb/EcNaaaKL2YDPfm",
	"HW51V5fmd5aWg94OyTaDaqwPqnl+xJaI8IIoGJQy9U0lWheTOKYsH0pgCdFDKrK4bdOohKZNrvgq0f44",
	"17KERnYhRAokN8JCrkjuusxTGI+ej07GzxsdnmtYgaz2qLwD2Y+43ZJDmaisFfijtPYCiboge05biLWy",
	"DTWBT4peJUVx1BLYdwc3JHvAkJeZ5dW6HcieVO1r1HgPBf4ZpAqS7273cNhJLXi13VpOLEVviuE5yDtO",
	"AemEaCQhJRuFbCugRclThpomjHDKKbglUU0ufFoQmgAaD0c4slSsKKsmcbxer4fEPg+FXMVOV8Xns7Pp",
	"x/l0MB6OhonOUosg15Y8F8r6HPBcaZKmIJGqosPRLmn8zHK2gJwUHE/wyXA0NL8PCqITC0/cbmwVP7S3",
	"4tYIrKqL0UBq2TVjeIJ/B+0fJMaiJBlokApPvnVxa1tFSyHROuE0QVqgVIgbVBaI3BGekkUKiHQM89xO",
	"A22uJIdkZ3Xvqlg1bUXDUMWvjHC1vW3249HInjgi15DbPElRpJzaTOPvquLNzt6xt5bClkQ+CASlXGkk",
	"lvuSRSRnSCfAJSJKCcqJBub4VV2Gxqgqs4zIDZ6Y0hjxvUZami2XBn6CVvwOcuQBaYxXibnbRlQjwM/C",
	"CVTGbVO2ieHOmpl7dP3wm2Cbfw3nzr0aAJqBJjxVBmkHgUALQC5y1mPM9glZ0b0ZA+HWiCZEIaWJ1MA6",
	"hfYxb9cpfnB/zFi7W30H1ZFoiZc7ROoyR/3G9i/TRxp7xozZOj7nSAu0sj8oA63bhPuf6Vs/3wP1UbVE",
	"twcP4GtrxbqX5b6Z6p+gT5iz7+jIWcU6SsFRdEA6dmtoWMe6D4aLSu6dctO9D4IfrARdylwhnXCFmKBl",
	"ZgAKB+hiQCYGpAqgfOkgNAcXWRmS4ww0MXdAhOPW+RDsrdqu272olg801ufm6cnqWrsIVrQbYhigvtR2",
	"+3cAAAD//4F+hcTzFAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
