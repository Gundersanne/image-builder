// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	Version string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws   UploadTypes = "aws"
	UploadTypes_azure UploadTypes = "azure"
	UploadTypes_gcp   UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//aH1RXSAtAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
