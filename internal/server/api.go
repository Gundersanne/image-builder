// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	Ec2    AWSUploadRequestOptionsEc2 `json:"ec2"`
	Region string                     `json:"region"`
	S3     AWSUploadRequestOptionsS3  `json:"s3"`
}

// AWSUploadRequestOptionsEc2 defines model for AWSUploadRequestOptionsEc2.
type AWSUploadRequestOptionsEc2 struct {
	AccessKeyId     string `json:"access_key_id"`
	SecretAccessKey string `json:"secret_access_key"`
}

// AWSUploadRequestOptionsS3 defines model for AWSUploadRequestOptionsS3.
type AWSUploadRequestOptionsS3 struct {
	AccessKeyId     string `json:"access_key_id"`
	Bucket          string `json:"bucket"`
	SecretAccessKey string `json:"secret_access_key"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	Status string `json:"status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Subscription *Subscription `json:"subscription,omitempty"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture   string           `json:"architecture"`
	ImageType      string           `json:"image_type"`
	UploadRequests *[]UploadRequest `json:"upload_requests,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options AWSUploadRequestOptions `json:"options"`
	Type    string                  `json:"type"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

type ServerInterface interface {
	// compose image (POST /compose)
	ComposeImage(w http.ResponseWriter, r *http.Request)
	// get status of an image compose (GET /compose/{composeId})
	GetComposeStatus(w http.ResponseWriter, r *http.Request)
	// get the openapi json specification (GET /openapi.json)
	GetOpenapiJson(w http.ResponseWriter, r *http.Request)
	// get the service version (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// ComposeImage operation middleware
func ComposeImageCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetComposeStatus operation middleware
func GetComposeStatusCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "composeId" -------------
		var composeId string

		err = runtime.BindStyledParameter("simple", false, "composeId", chi.URLParam(r, "composeId"), &composeId)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter composeId: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "composeId", composeId)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetOpenapiJson operation middleware
func GetOpenapiJsonCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetVersion operation middleware
func GetVersionCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(ComposeImageCtx)
		r.Post("/compose", si.ComposeImage)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetComposeStatusCtx)
		r.Get("/compose/{composeId}", si.GetComposeStatus)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetOpenapiJsonCtx)
		r.Get("/openapi.json", si.GetOpenapiJson)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetVersionCtx)
		r.Get("/version", si.GetVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWQW/bOBP9KwK/7yhLrlOgC9+yWXfhpk2KGtttUQQBTY4ltpKokKOo3kD/fUGKkkVL",
	"cdrF5rCnpuJw5s17b4Z+IEzmpSygQE2WD0SzFHJq/zz/c/NHmUnKP8BdBRqvSxSysEelkiUoFGD/B2xh",
	"/vm/gh1Zkv/Fh4yxSxc/kmvFFqQJiYJEyMKm+k7zMgOyJFDNatA4e0FCgvvSfNKoRJGYC/rsHxbcnJHG",
	"FryrhAJOll+64jZpaHu56SvK7VdgaCqeaGDEB2UMtL79Bvtbwf2uzi/X5+vrzevr366uXq0+nb97/3Y1",
	"2SAwBXh7yOSnqd/QTH26q7m4q/nr1bt1fPnqTtQ83r7//mEnLj671JerzyQkO6lyimRJSqp1LRUfVzzi",
	"xO9gCs5PcLQ5exaKthX7Bujfzfcz9/m/yGnf0xS5F8bjGhy1Y0ZZpVHm4i/aD+mp8bjwo5uQcGFwbysc",
	"TaJKIZv9MsWoyGkCt6qFZGsKhPzJ4mtzrWuk6fNSpeh+RJuHa1TyJFO6lIWGMVWt406rJTi5OeTaIMVq",
	"YvPp/vvpbC7OZhzpdJSy2mqmRNnpcIrIzTC2aSa48KgeT6FiqUBgWCmYaKJju/08cVzZaf95A3hb4kkH",
	"eCg9TIbPzRFfx3sGxb2lejYa+Hw/a2dw1g7fD4x0SLZUw6xSmZ8qRSyXccx4ESngKcWIyTwe5jRXpiao",
	"0CJJW+r6dKgq6GO3UmZACxMsVUIL5xzvwmL+cn62eNnfEQVCAqpdeuoe1Bjx0GaRSnU+AP7kKvOAhMck",
	"e0UHjA26nRpb3xQjJWX5Q4vtsR8tvckeCBRVbn1VD4E80qo9DfvqU8A/gtKT5rs/HJwu0gXeNI31xE6a",
	"OxwGxiYbUPeCQYApxUBBRvc6sKMQbCuR8aAfwpBkgoFbfAXN7ZtaUpZCsIjmJLRWbC2rl3Fc13VE7XEk",
	"VRK7uzp+u75YXW1Ws0U0j1LMM8ugQGuea21rzkShkWYZqEC36Eh4aJq8sJ4toaClIEtyFs0j82OupJha",
	"elr53IKWreZ+zy6g7dOqAMr6bM3JstvNa3foCPhVcjvnTBYIhU1KyzITzF6Mv+pWkNYvTz6T/qNr5fEh",
	"ckAqMh3InVMDZbCFwCHnZCi0mWurfPswWRIW8/m/j9Y9fBNwO0ZTqgONVCFw60Zd5TlV+xHn5qzTKX5w",
	"f6x5Y6AkMCFZ+9IZOmjhGOlkPtbvd0D/eTXeUDQHBKXJ8stx6jU3aTt8rhDKILE/90RhNzemJOxc38Md",
	"qRAOGD0ezZvnV8j1e0If3UUMpUkAgxP8Wq3cvEUdLifSiPnrNu6Ntht8qmEfmAKsVKEDTIUOuGRVbsgY",
	"48MUAochMBgCXQITO0eXeVloYsQlOSA1Cy8k8WBPTnqqy+uWTNDFTxjqY3/0bBp2JSbUoyOI0wSNo5rm",
	"7wAAAP//GG7NPYkPAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
