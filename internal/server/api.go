// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture   string          `json:"architecture"`
	ImageType      string          `json:"image_type"`
	UploadRequests []UploadRequest `json:"upload_requests"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Version     string `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options AWSUploadRequestOptions `json:"options"`
	Type    UploadTypes             `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Status string      `json:"status"`
	Type   UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYXW/jthL9KwTvfbgXUCTbm6apgUWx3QbdFEF3sUm3D1sjoKWxxY0kKiQVxw383wt+",
	"6IMSZTvdLNA3JyRnzpyZOUPqCccsL1kBhRR4/oRFnEJO9M83f1z/XmaMJB/hvgIh35eSskIvlZyVwCUF",
	"cyYlHG43VKa3JI5ZZU3BI8nLDPD8M57OXp1+d/b9+Q+T6QwvAkwl5HqP3JaA51hITos13gX1PwjnZIt3",
	"uwBzuK8oh0SZ8TlaNGfY8gvEUhl5w+OUSohlxeFSQj6ETHicOhjx4/nZ7dkpDoaQaE7WcKv+rY822Nuz",
	"9zHbzHxH90ajMbjmDwXjAvgvhxWe4/9EbQojm79oQMEATYDfqmMCbHqHJMWVkCynf5Em7/s8vnV37wKc",
	"UMXEslL/cAnjKWQn5+NkcwPp+HAv1bE6kEPEO7gGLn05aJgSJSsEDKmiiaeae25pghetrWtJZOVpJoNG",
	"NKsHo7aGBt66drTfQTZdxyWJ78ga+q1bMiHXHMR99pzGDbColiLmtKyTvy+O6+7e3c6TgJ87KfN3dAKO",
	"u7bWPkKC3hGJLgoJvORUALqiRfWI/vfx3cXV/9F56G3dguRwXNH2iNcHAwfP4kBEx9f5gAcP8+9ubj5c",
	"cM64jyRJaObPH5UZHC5isy2oLS26/q6oT0VALR0fYYv+UBtbwwqC0/5esa+10Bt7K8He5UpPweeLkjM9",
	"jxoHDUoH0xBBE/OYirT6AUWV69lZxTEIgQO8IjQzPkooEhVjgJcVzexP48v85rCmQoImYhF0eqG1NsbW",
	"cQpmKBqRsI54fTDidLDtR9t4sPAAXPgPHe7n9nQHmxifDgmR5OiqqUP1dHZGiztPsleUm7Jv8xORkka6",
	"hE50aoFHD9OolvgfM5pT+Xo6+bOaTGZnbLUSIF/bv7rTMQzD0JfjjLyEw+nRHnspMQFbGD5xzcEQ3rvP",
	"qBtjJ+G0kLAGPjBv9g3t9rZpJ3VSApNkH5jr3iTsiVMs6YOeySd3sHVJzbcnAmIOUi8FeMV4TiSe45II",
	"sWE88eVmSQScVDxzTaVSlvMoipMi5JCkRIYxy6OuTXXEdyErBF2nvRu95BU0e5eMZUAKtZnxNSnsFcM5",
	"MJucTl7NToMB9QEWwB+ADxF3LxAhT0XeAX6wQhwgQZ9kx2mHsU60vkS6ej7IJCuPuiePPauafj9GMW/0",
	"c2EwnM20qIGMx/BSY4NXRWFnw8iF8J8HY7FYQ4sG+039EKshko3wAvjUKrwb5dHS36r8TnfCig1GDr4G",
	"/kBjQDIlEnHIyFYgrYNI6yBqZrZSihjsfDBjCb8pSZwCmoUTNXhVB+hGFfMo2mw2IdHLIePryJ4V0dXl",
	"24vfri9OZuEkTGWede5u5kpQ6y8SBllnWs3xNJzoPi2hICXFc/wqnIRTlVMiU01O1L2HiOipK847tWEN",
	"0lQ7cN1Rlwme419Auu9UZZGTHCSou9/nPmtdq2jFONqkNE6RZChj7A5VJSIPhGZkmQEiPcO00Aoo1ePZ",
	"8th70bU5NEJlys2X74XabMa2jn42mZhJUUgws4KUZUZjHWn0RZiqae0d+wRX5b0LeiQQlFEhEVuNBYtI",
	"kSCZAuWICMFiSiQktrpk0zSiynPCt3iuUqO2jxrpnOy4VPQTtKYPUCCHSGXcBGYvNczInhuF3WCMa/Xp",
	"FoZ97V7aRdsNP7Fk+2I89z5jeIg2jxWhmLYUMLQEZJEng4rZDapi+vJo7WXRA7dmNCUCCUm4hEQ17ekL",
	"1qb7ZvNgUGVU47BJQ1SgnGTqwqAAOZXnFkG3cET0ZH9dJl39cN0ZsdetUNgc1YUXDKXG/YRyQGouE2W2",
	"BmgdSYYUDq+YNHD/NUrixrunYkT7kHJVYQ+/OllJ/2vEmMq7ny2+YcyuoyPVM+kd8orjnt2RHYxhjXWM",
	"hvdm36/CzpshCS5YDrLihUAypQIlLK5yRZAfoMWAFAYkSojpylKoLkNkLZrHx0Jj7n64G8Nbv1GfNZc7",
	"07j2oYZF3TX3FfDtC8zgoA+iO76eCaL3EeUrQDTOagDjTgXYT/lf4S4nj4jk6uGpKrp2HqAEVqTKJJpO",
	"JiPe9dMae5x1nrejwZVKCcxzvPU15sns2+/qW8rg4EPLXlVo2mKnt0WdW793BNXtZ6/NqN7vmT+fmqVv",
	"FmvtwhtiH6JfR4a7dru/AwAA///tmgcJ7xsAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
